circuit YEMU :
  module YEMU :
    input clock : Clock
    input reset : UInt<1>
    output io : { halt : UInt<1>}

    cmem R : UInt<64> [32] @[yemu.scala 6:14]
    reg PC : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[yemu.scala 7:19]
    cmem M : UInt<32> [256] @[yemu.scala 8:14]
    node _inst_T = bits(PC, 63, 2) @[yemu.scala 20:18]
    node _inst_T_1 = bits(_inst_T, 7, 0) @[yemu.scala 20:15]
    infer mport inst_MPORT = M[_inst_T_1], clock @[yemu.scala 20:15]
    wire inst : { imm11_0 : UInt<12>, rs1 : UInt<5>, funct3 : UInt<3>, rd : UInt<5>, opcode : UInt<7>} @[yemu.scala 20:35]
    wire _inst_WIRE : UInt<32>
    _inst_WIRE <= inst_MPORT
    node _inst_T_2 = bits(_inst_WIRE, 6, 0) @[yemu.scala 20:35]
    inst.opcode <= _inst_T_2 @[yemu.scala 20:35]
    node _inst_T_3 = bits(_inst_WIRE, 11, 7) @[yemu.scala 20:35]
    inst.rd <= _inst_T_3 @[yemu.scala 20:35]
    node _inst_T_4 = bits(_inst_WIRE, 14, 12) @[yemu.scala 20:35]
    inst.funct3 <= _inst_T_4 @[yemu.scala 20:35]
    node _inst_T_5 = bits(_inst_WIRE, 19, 15) @[yemu.scala 20:35]
    inst.rs1 <= _inst_T_5 @[yemu.scala 20:35]
    node _inst_T_6 = bits(_inst_WIRE, 31, 20) @[yemu.scala 20:35]
    inst.imm11_0 <= _inst_T_6 @[yemu.scala 20:35]
    node _isAddi_T = eq(inst.opcode, UInt<5>("h13")) @[yemu.scala 21:29]
    node _isAddi_T_1 = eq(inst.funct3, UInt<1>("h0")) @[yemu.scala 21:63]
    node isAddi = and(_isAddi_T, _isAddi_T_1) @[yemu.scala 21:47]
    node isEbreak_lo = cat(inst.rd, inst.opcode) @[yemu.scala 22:23]
    node isEbreak_hi_hi = cat(inst.imm11_0, inst.rs1) @[yemu.scala 22:23]
    node isEbreak_hi = cat(isEbreak_hi_hi, inst.funct3) @[yemu.scala 22:23]
    node _isEbreak_T = cat(isEbreak_hi, isEbreak_lo) @[yemu.scala 22:23]
    node isEbreak = eq(_isEbreak_T, UInt<21>("h100073")) @[yemu.scala 22:30]
    node _T = or(isAddi, isEbreak) @[yemu.scala 23:17]
    node lo = cat(inst.rd, inst.opcode) @[yemu.scala 23:63]
    node hi_hi = cat(inst.imm11_0, inst.rs1) @[yemu.scala 23:63]
    node hi = cat(hi_hi, inst.funct3) @[yemu.scala 23:63]
    node _T_1 = cat(hi, lo) @[yemu.scala 23:63]
    node _T_2 = bits(reset, 0, 0) @[yemu.scala 23:9]
    node _T_3 = eq(_T_2, UInt<1>("h0")) @[yemu.scala 23:9]
    when _T_3 : @[yemu.scala 23:9]
      node _T_4 = eq(_T, UInt<1>("h0")) @[yemu.scala 23:9]
      when _T_4 : @[yemu.scala 23:9]
        printf(clock, UInt<1>("h1"), "Assertion failed: Invalid instruction 0x%x\n    at yemu.scala:23 assert(isAddi || isEbreak, \"Invalid instruction 0x%%x\", inst.asUInt)\n", _T_1) : printf @[yemu.scala 23:9]
      assert(clock, _T, UInt<1>("h1"), "") : assert @[yemu.scala 23:9]
    node _rs1Val_T = mux(isEbreak, UInt<5>("ha"), inst.rs1) @[yemu.scala 25:25]
    node _rs1Val_T_1 = eq(_rs1Val_T, UInt<1>("h0")) @[yemu.scala 9:34]
    infer mport rs1Val_MPORT = R[_rs1Val_T], clock @[yemu.scala 9:55]
    node rs1Val = mux(_rs1Val_T_1, UInt<64>("h0"), rs1Val_MPORT) @[yemu.scala 9:29]
    node _rs2Val_T = mux(isEbreak, UInt<5>("hb"), UInt<5>("h0")) @[yemu.scala 26:25]
    node _rs2Val_T_1 = eq(_rs2Val_T, UInt<1>("h0")) @[yemu.scala 9:34]
    infer mport rs2Val_MPORT = R[_rs2Val_T], clock @[yemu.scala 9:55]
    node rs2Val = mux(_rs2Val_T_1, UInt<64>("h0"), rs2Val_MPORT) @[yemu.scala 9:29]
    when isAddi : @[yemu.scala 27:16]
      infer mport MPORT = R[inst.rd], clock @[yemu.scala 27:19]
      node _T_5 = bits(inst.imm11_0, 11, 11) @[yemu.scala 18:52]
      node _T_6 = bits(_T_5, 0, 0) @[Bitwise.scala 77:15]
      node _T_7 = mux(_T_6, UInt<52>("hfffffffffffff"), UInt<52>("h0")) @[Bitwise.scala 77:12]
      node _T_8 = cat(_T_7, inst.imm11_0) @[Cat.scala 33:92]
      node _T_9 = add(rs1Val, _T_8) @[yemu.scala 27:39]
      node _T_10 = tail(_T_9, 1) @[yemu.scala 27:39]
      MPORT <= _T_10 @[yemu.scala 27:29]
    node _T_11 = eq(rs1Val, UInt<1>("h0")) @[yemu.scala 28:28]
    node _T_12 = and(isEbreak, _T_11) @[yemu.scala 28:17]
    when _T_12 : @[yemu.scala 28:38]
      node _T_13 = bits(rs2Val, 7, 0) @[yemu.scala 28:59]
      node _T_14 = bits(reset, 0, 0) @[yemu.scala 28:46]
      node _T_15 = eq(_T_14, UInt<1>("h0")) @[yemu.scala 28:46]
      when _T_15 : @[yemu.scala 28:46]
        printf(clock, UInt<1>("h1"), "%c", _T_13) : printf_1 @[yemu.scala 28:46]
    node _io_halt_T = eq(rs1Val, UInt<1>("h1")) @[yemu.scala 29:34]
    node _io_halt_T_1 = and(isEbreak, _io_halt_T) @[yemu.scala 29:23]
    io.halt <= _io_halt_T_1 @[yemu.scala 29:11]
    node _PC_T = add(PC, UInt<3>("h4")) @[yemu.scala 30:12]
    node _PC_T_1 = tail(_PC_T, 1) @[yemu.scala 30:12]
    PC <= _PC_T_1 @[yemu.scala 30:6]

